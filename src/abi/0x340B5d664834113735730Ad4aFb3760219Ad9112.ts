import * as ethers from 'ethers'
import {LogEvent, Func, ContractBase} from './abi.support'
import {ABI_JSON} from './0x340B5d664834113735730Ad4aFb3760219Ad9112.abi'

export const abi = new ethers.utils.Interface(ABI_JSON);

export const functions = {
    allMarketSummaries: new Func<[], {}, Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>>(
        abi, '0x3c88ee18'
    ),
    allProxiedMarketSummaries: new Func<[], {}, Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>>(
        abi, '0x093bfd66'
    ),
    globals: new Func<[], {}, ([minInitialMargin: ethers.BigNumber, liquidationFeeRatio: ethers.BigNumber, minKeeperFee: ethers.BigNumber, maxKeeperFee: ethers.BigNumber] & {minInitialMargin: ethers.BigNumber, liquidationFeeRatio: ethers.BigNumber, minKeeperFee: ethers.BigNumber, maxKeeperFee: ethers.BigNumber})>(
        abi, '0xc3124525'
    ),
    marketDetails: new Func<[market: string], {market: string}, ([market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})] & {market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})})>(
        abi, '0x730e0037'
    ),
    marketDetailsForKey: new Func<[marketKey: string], {marketKey: string}, ([market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})] & {market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})})>(
        abi, '0xc1d1df56'
    ),
    marketSummaries: new Func<[markets: Array<string>], {markets: Array<string>}, Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>>(
        abi, '0xa9e0bef7'
    ),
    marketSummariesForKeys: new Func<[marketKeys: Array<string>], {marketKeys: Array<string>}, Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>>(
        abi, '0x83ce9022'
    ),
    parameters: new Func<[marketKey: string], {marketKey: string}, ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber, maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber, maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber, nextPriceConfirmWindow: ethers.BigNumber, delayedOrderConfirmWindow: ethers.BigNumber, minDelayTimeDelta: ethers.BigNumber, maxDelayTimeDelta: ethers.BigNumber, offchainDelayedOrderMinAge: ethers.BigNumber, offchainDelayedOrderMaxAge: ethers.BigNumber, offchainMarketKey: string, offchainPriceDivergence: ethers.BigNumber, liquidationPremiumMultiplier: ethers.BigNumber, liquidationBufferRatio: ethers.BigNumber, maxLiquidationDelta: ethers.BigNumber, maxPD: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber, maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber, maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber, nextPriceConfirmWindow: ethers.BigNumber, delayedOrderConfirmWindow: ethers.BigNumber, minDelayTimeDelta: ethers.BigNumber, maxDelayTimeDelta: ethers.BigNumber, offchainDelayedOrderMinAge: ethers.BigNumber, offchainDelayedOrderMaxAge: ethers.BigNumber, offchainMarketKey: string, offchainPriceDivergence: ethers.BigNumber, liquidationPremiumMultiplier: ethers.BigNumber, liquidationBufferRatio: ethers.BigNumber, maxLiquidationDelta: ethers.BigNumber, maxPD: ethers.BigNumber})>(
        abi, '0x02506804'
    ),
    positionDetails: new Func<[market: string, account: string], {market: string, account: string}, ([position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean] & {position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean})>(
        abi, '0x808bad34'
    ),
    positionDetailsForMarketKey: new Func<[marketKey: string, account: string], {marketKey: string, account: string}, ([position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean] & {position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean})>(
        abi, '0x985f289e'
    ),
    resolverProxy: new Func<[], {}, string>(
        abi, '0x6a59e495'
    ),
}

export class Contract extends ContractBase {

    allMarketSummaries(): Promise<Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>> {
        return this.eth_call(functions.allMarketSummaries, [])
    }

    allProxiedMarketSummaries(): Promise<Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>> {
        return this.eth_call(functions.allProxiedMarketSummaries, [])
    }

    globals(): Promise<([minInitialMargin: ethers.BigNumber, liquidationFeeRatio: ethers.BigNumber, minKeeperFee: ethers.BigNumber, maxKeeperFee: ethers.BigNumber] & {minInitialMargin: ethers.BigNumber, liquidationFeeRatio: ethers.BigNumber, minKeeperFee: ethers.BigNumber, maxKeeperFee: ethers.BigNumber})> {
        return this.eth_call(functions.globals, [])
    }

    marketDetails(market: string): Promise<([market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})] & {market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})})> {
        return this.eth_call(functions.marketDetails, [market])
    }

    marketDetailsForKey(marketKey: string): Promise<([market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})] & {market: string, baseAsset: string, marketKey: string, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber}), limits: ([maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber] & {maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber}), fundingParameters: ([maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber] & {maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber}), marketSizeDetails: ([marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber] & {marketSize: ethers.BigNumber, sides: ([long: ethers.BigNumber, short: ethers.BigNumber] & {long: ethers.BigNumber, short: ethers.BigNumber}), marketDebt: ethers.BigNumber, marketSkew: ethers.BigNumber}), priceDetails: ([price: ethers.BigNumber, invalid: boolean] & {price: ethers.BigNumber, invalid: boolean})})> {
        return this.eth_call(functions.marketDetailsForKey, [marketKey])
    }

    marketSummaries(markets: Array<string>): Promise<Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>> {
        return this.eth_call(functions.marketSummaries, [markets])
    }

    marketSummariesForKeys(marketKeys: Array<string>): Promise<Array<([market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})] & {market: string, asset: string, key: string, maxLeverage: ethers.BigNumber, price: ethers.BigNumber, marketSize: ethers.BigNumber, marketSkew: ethers.BigNumber, marketDebt: ethers.BigNumber, currentFundingRate: ethers.BigNumber, currentFundingVelocity: ethers.BigNumber, feeRates: ([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber})})>> {
        return this.eth_call(functions.marketSummariesForKeys, [marketKeys])
    }

    parameters(marketKey: string): Promise<([takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber, maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber, maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber, nextPriceConfirmWindow: ethers.BigNumber, delayedOrderConfirmWindow: ethers.BigNumber, minDelayTimeDelta: ethers.BigNumber, maxDelayTimeDelta: ethers.BigNumber, offchainDelayedOrderMinAge: ethers.BigNumber, offchainDelayedOrderMaxAge: ethers.BigNumber, offchainMarketKey: string, offchainPriceDivergence: ethers.BigNumber, liquidationPremiumMultiplier: ethers.BigNumber, liquidationBufferRatio: ethers.BigNumber, maxLiquidationDelta: ethers.BigNumber, maxPD: ethers.BigNumber] & {takerFee: ethers.BigNumber, makerFee: ethers.BigNumber, takerFeeDelayedOrder: ethers.BigNumber, makerFeeDelayedOrder: ethers.BigNumber, takerFeeOffchainDelayedOrder: ethers.BigNumber, makerFeeOffchainDelayedOrder: ethers.BigNumber, maxLeverage: ethers.BigNumber, maxMarketValue: ethers.BigNumber, maxFundingVelocity: ethers.BigNumber, skewScale: ethers.BigNumber, nextPriceConfirmWindow: ethers.BigNumber, delayedOrderConfirmWindow: ethers.BigNumber, minDelayTimeDelta: ethers.BigNumber, maxDelayTimeDelta: ethers.BigNumber, offchainDelayedOrderMinAge: ethers.BigNumber, offchainDelayedOrderMaxAge: ethers.BigNumber, offchainMarketKey: string, offchainPriceDivergence: ethers.BigNumber, liquidationPremiumMultiplier: ethers.BigNumber, liquidationBufferRatio: ethers.BigNumber, maxLiquidationDelta: ethers.BigNumber, maxPD: ethers.BigNumber})> {
        return this.eth_call(functions.parameters, [marketKey])
    }

    positionDetails(market: string, account: string): Promise<([position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean] & {position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean})> {
        return this.eth_call(functions.positionDetails, [market, account])
    }

    positionDetailsForMarketKey(marketKey: string, account: string): Promise<([position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean] & {position: ([id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber] & {id: ethers.BigNumber, lastFundingIndex: ethers.BigNumber, margin: ethers.BigNumber, lastPrice: ethers.BigNumber, size: ethers.BigNumber}), notionalValue: ethers.BigNumber, profitLoss: ethers.BigNumber, accruedFunding: ethers.BigNumber, remainingMargin: ethers.BigNumber, accessibleMargin: ethers.BigNumber, liquidationPrice: ethers.BigNumber, canLiquidatePosition: boolean})> {
        return this.eth_call(functions.positionDetailsForMarketKey, [marketKey, account])
    }

    resolverProxy(): Promise<string> {
        return this.eth_call(functions.resolverProxy, [])
    }
}
